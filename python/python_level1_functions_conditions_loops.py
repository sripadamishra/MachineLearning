# -*- coding: utf-8 -*-
"""Python_Level1_functions_conditions_loops.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b5lKJSOsWrnzyBhsywL5LgY_Sp5oDghW

#Python Functions or Methods
"""

#Function is useful to group one or more statements, code block and execute as a unit.
# Function can inputs as parameters or arguments.
# It can return result or output of the execution logic written inside the function.
# Let us see one example
# Function Definition
def first_func():   # this is function signature
  print('Hello, I have written my first function')  # Body of the function

# Call the function
first_func()

"""#Pass Parameters"""

def print_name(first_name,last_name):
  print('Name is ', first_name,last_name)

print_name('Rohan','Sharma')

"""#Return Values"""

# It takes 2
def print_name(first_name,last_name):
  return first_name + ' ' + last_name

name = print_name('Lakshmi','Chatterjee')
print(name)

#Number of Parameters
# While calling the function, you need to pass equal number of arguments, otherwise, it will throw error

name = print_name('Lakshmi') #throw an error

"""#Variable number of arguments"""

#If number of arguments is unknown that will be passed into the function,
# it is required to put an asterisk( * ) before the parameter name in the function definition.
# So, the function will receive a tuple of arguments, and handle the params.
# Let us take an example

def my_variable_args_function(*args):
  for item in args:
    print('param = ', item)

my_variable_args_function(1,2,3)

"""#Keyword Arguments"""

# If the arguments are sent withour order, then it must be sent with key = value syntax.
def my_keyword_args_func(param1,param2,param3):
  print('arg 1 = ', param1)
  print('arg 2 = ', param2)
  print('arg 3 = ', param3)

my_keyword_args_func(param3 = 3, param1 = 1, param2 =2)

"""#Variable Keyworg Arguments"""

#Variable Keyworg Arguments
#If number of keyword arguments is unknown that will be passed into the function,
# it is required to put an double asterisk( ** ) before the parameter name in the function definition.
# So, the function will receive a dictionary of arguments, and handle the params.
# Let us take an example
def my_variable_keyword_args_func(**kwargs):
  print('param1 =',kwargs['param1'])
  print('param2 =',kwargs['param2'])
  print('param3 =',kwargs['param3'])
  print('param4 =',kwargs['param4'])

my_variable_keyword_args_func(param1='a',param2=2,param3='c',param4=100)

"""# Any type of data in Argument ( List, Dictionary, number,String etc..)"""

#Function accepting a List
def func_list(my_list):
  for item in my_list:
    print(item)

x = [1,2,3]
func_list(x)

#Function accepting a Dictionary
def func_dict(my_dict):
  print(my_dict.items())

x = {'name':'sunil','age':40,'choice':'veg'}
func_dict(x)

"""#Default Parameter"""

#If no parameter is passed, default parameter is used.
def func_with_default_param(first_name,last_name,title='Mr.'):
  print(title,first_name,last_name)

func_with_default_param(first_name='Sunil',last_name='Karmakar')
func_with_default_param(title='Mrs.',first_name='Susmita',last_name='Kar')

# Few example of function

def add(x,y):
  return x + y
def sub(x,y):
  return x - y
def mul(x,y):
  return x * y
def div(x,y):
  return x / y

x,y = 100,10

print('Add result=', add(x,y))
print('Substration result=', sub(x,y))
print('Multiplication result=', mul(x,y))
print('Division result=', div(x,y))

"""#Python Conditions

#If-else
"""

# Python conditions are checked using if statement
# for example, if you want to put grade of a student based on his number scored.
# Grade is 'A' if score is above or equal 90 and grade 'B' otherwise

def grade(score):
  if score >=90: # it should end with colon and next line must have indentation, else throw error.
    print('Grade = A')
  else: # this is executed if the if condition is not satisfied
    print('Grade = B')

score = 95
grade(score)

score = 80
grade(score)

"""#If-Elif-else"""

#Now if you have multiple conditions you need to use elif condition
# if score >= 90 Grade = A
# if score > 80 and < 90 Grade = B
# if score > 70 and < 80 Grade = C
# else Grade = D

def grade(score):
  if score >= 90:
    print('Grade = A')
  elif(score >= 80 and score < 90):
    print('Grade = B')
  elif(score >=70 and score < 80):
    print('Grade = C')
  else:
    print('Grade = D')

score = 98
print('student-1 score =',score)
grade(score)

score = 50
print('student-2 score =',score)
grade(score)

score = 78
print('student-3 score =', score)
grade(score)

score = 88
print('student-4 score =', score)
grade(score)

"""#Nested If"""

# If you need to combine multiple conditions together, you can use nested if
# If student's total marks are more than 500 and science score is more than 250 then Grade is 'A++',Otherwise 'A+'
# If student's total marks are below 500 and sci score is above 250, score is 'A-'

def grade(total_score,sci_score):
  if total_score >= 500:
    if sci_score >= 250:
      print('Grade = A++')
    else:
      print('Grade = A+')
  else:
    if sci_score >= 250:
      print('Grade = A-')
    else:
      print('Grade = B++')

total_score = 560
sci_score = 255
print('Total score= {} and sci_score= {}'.format(total_score,sci_score))
grade(total_score,sci_score)

total_score = 520
sci_score = 230
print('Total score= {} and sci_score= {}'.format(total_score,sci_score))
grade(total_score,sci_score)

total_score = 450
sci_score = 255
print('Total score= {} and sci_score= {}'.format(total_score,sci_score))
grade(total_score,sci_score)

total_score = 450
sci_score = 220
print('Total score= {} and sci_score= {}'.format(total_score,sci_score))
grade(total_score,sci_score)

"""#Single line If"""

score = 95
if score >= 90: print('Grade = A')

#If-else

score = 88
print('Grade = A') if score >= 90 else print('Grade = B')

# 3 conditions in one line
score = 78
print('Grade = A') if score >= 90 else print('Grade = B') if score >= 80 and score < 90 else print('Grade C')

"""#Python Loops"""

# for Loop is used to iterate a sequence. [ list, set, tuple]
# for is used to execute piece of code block numtiple times specified by the count of times.

text = 'education'

for x in text:
  print(x)

#Let us iterate a list
my_list = ['Car','Bi-cycle','Motor-bike','Plane'] #vehicles

for vehicle in my_list:
  print(vehicle)

#iterating a tuple
my_tuple = ('toyota','$20,000','camry')
for x in my_tuple:
  print(x)

"""#Break Statement"""

#use of break is to come out of a loop once certain condition is satisfied.
# Example - if you are searching a list of numbers to find if a square number exists. If found, then break the loop, no need to search further.
squares = [x**2 for x in range(1,11)] # squares till 100
search_list = [2,3,5,7,25,12,15,20,22] # list contains only 1 square number.
print('Squares list',squares)
print('Search numbers list',search_list)
for n in search_list:
  if(n in squares):
    print('Square number found in list: =', n)
    print('Break the loop')
    break

"""# Continue Statement"""

#Continue will go to next iteration in the loop without executing the set of steps mentioned after the continue statement.
#This is useful when you want not to execute certain steps under some conditions and move to next iteration in the loop.
multipliers_10 = [10*x for x in range(1,11)]
search_list = [1,11,21,20,35,45,63,50,40,90,55,67,100]
#print only the number which is not multipliers of 10.
for x in search_list:
  if(x in multipliers_10):
    continue
  print('Number which is not a multiplier of 10 = ',x)

"""# Python While Loop"""

#while loop is alos used to execute a setup of steps until certain conditions are met mentioned in the loop.
#Let us print first 10 natural numbers

i = 1 # initialize variable i with 1 and we shall increment it to get the next next and this iteration will happen until i reaches to 10.
while i < 11: # this is the loop condition how many times the loop will iterate.
  print(i)
  i += 1 # increment i

# As shown earlier, break and continue can be used inside while loop with if-else conditions..
# in a list of numbers, if any number number > 100 is found break the loop.
search_list = [1,2,3,56,78,98,203,405,333,23]
l = len(search_list)
i = 0
while (i < l):
  if(search_list[i] > 100):
    print('Greater than 100 number=', search_list[i])
    break
  i += 1 # Do not forget to write this! Else the loop will continue forever, falling into infinite loop!!

"""#Recursive functions"""

# When one function() calls itself - it is known as recursive function.
i = 1
def printme(i):
  if(i > 20):        # this is known as terminating condition. without this the recursive function will keep on running in infinite times.
    print('Stop')
  else:
    print(i)
    printme(i+1)


printme(i)

#Let us write another example
# Write a factorial function using recursive function

def calc_factorial(i):
  if(i == 1):
    return 1
  else:
    return i * calc_factorial(i-1)
print(calc_factorial(5))

"""#Lambda Function"""

#Lambda is a special type of function- known as anonymous function.
# It is defined with keyword lambda.
# It has syntax as:   lambda parameter:expression
# Let us write our first lambda function which takes one value and increment it by 1.
lambda x: x + 1

#Now, call the lambda function
# surround the lambda function with parenthesis ->  (lambda x: x + 1)
#pass the parameter just like normal function ->   (6)
print((lambda x: x + 1)(6))

# you can assign lambda function to a variable and then call it like function
# But this is recommended as it will boil down the normal function behaviour instead of short-term use of anonymoud function

var_func = (lambda x: x + 1)

print(var_func(5))

# Lambda function can take multiple parameters as well separated by comma

lambda x , y , z : x*x + y*y + z*z

print((lambda x , y , z : x*x + y*y + z*z)(2,3,4)) # print 2*2 + 3*3 + 4*4 = 29

# You can write conditional statement inside the lamdba function
#

#Let us take one list of numbers and find even numbers using lambda
nums = [2,4,6,10,15,17,19,21]
print((lambda my_list : [x for x in my_list if x%2 == 0])(nums))